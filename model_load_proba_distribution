#############################################################################################################################################################
#############################################################################################################################################################

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Load a pre-trained model
model = tf.keras.applications.ResNet50(weights='imagenet')

# Load your test dataset into a TensorFlow Dataset or generator
test_data_dir = "path/to/your/test/dataset"
batch_size = 32

# Create a TensorFlow Dataset for the test data
test_dataset = tf.keras.utils.image_dataset_from_directory(
    test_data_dir,
    image_size=(224, 224),
    batch_size=batch_size,
    label_mode=None,  # We want to predict, so no labels
    shuffle=False
)

# Get the class labels from the dataset
class_labels = list(test_dataset.class_indices.keys())

# Create an empty list to store predicted probabilities for each class
class_probabilities = [[] for _ in class_labels]

# Iterate over batches in the test dataset and predict probabilities
for images in test_dataset:
    predictions = model.predict(images)
    for i, class_prob in enumerate(predictions):
        class_probabilities[i].extend(class_prob)

# Plot the probability distributions individually for each class
for i, class_name in enumerate(class_labels):
    plt.figure(figsize=(10, 6))
    plt.hist(class_probabilities[i], bins=20, alpha=0.5)
    plt.xlabel("Probability")
    plt.ylabel("Frequency")
    plt.title(f"Distribution of Predicted Probabilities for Class {class_name}")
    plt.tight_layout()
    plt.show()

#############################################################################################################################################################
#############################################################################################################################################################


import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Load a pre-trained model
model = tf.keras.applications.ResNet50(weights='imagenet')

# Path to your test dataset
test_data_dir = "path/to/your/test/dataset"
batch_size = 32

# Create an ImageDataGenerator for the test data
test_datagen = ImageDataGenerator(rescale=1.0/255)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

# Get the class labels from the generator
class_labels = list(test_generator.class_indices.keys())

# Create an empty list to store predicted probabilities for each class
class_probabilities = [[] for _ in class_labels]

# Iterate over batches in the test generator and predict probabilities
for images, _ in test_generator:
    predictions = model.predict(images)
    for i, class_prob in enumerate(predictions):
        class_probabilities[i].extend(class_prob)

# Plot the probability distributions individually for each class
for i, class_name in enumerate(class_labels):
    plt.figure(figsize=(10, 6))
    plt.hist(class_probabilities[i], bins=20, alpha=0.5)
    plt.xlabel("Probability")
    plt.ylabel("Frequency")
    plt.title(f"Distribution of Predicted Probabilities for Class {class_name}")
    plt.tight_layout()
    plt.show()

import tensorflow as tf
import numpy as np
from scipy.stats import ks_2samp

# Load a pre-trained model
model = tf.keras.applications.ResNet50(weights='imagenet')

# Load your reference and new test datasets into TensorFlow Datasets or generators
reference_data_dir = "path/to/reference/dataset"
new_data_dir = "path/to/new/dataset"
batch_size = 32

# Create TensorFlow Datasets for the reference and new data
reference_dataset = tf.keras.utils.image_dataset_from_directory(
    reference_data_dir,
    image_size=(224, 224),
    batch_size=batch_size,
    label_mode=None,  # We want to predict, so no labels
    shuffle=False
)

new_dataset = tf.keras.utils.image_dataset_from_directory(
    new_data_dir,
    image_size=(224, 224),
    batch_size=batch_size,
    label_mode=None,
    shuffle=False
)

# Create an empty list to store predicted probabilities for both datasets
reference_predictions = []
new_predictions = []

# Iterate over batches in the reference dataset
for images in reference_dataset:
    predictions = model.predict(images)
    reference_predictions.extend(predictions)

# Iterate over batches in the new dataset
for images in new_dataset:
    predictions = model.predict(images)
    new_predictions.extend(predictions)

# Convert predictions to NumPy arrays
reference_predictions = np.array(reference_predictions)
new_predictions = np.array(new_predictions)

# Perform KS test for each class
for class_idx, class_name in enumerate(model.predict(images).shape[1]):
    reference_class_probs = reference_predictions[:, class_idx]
    new_class_probs = new_predictions[:, class_idx]

    # Perform KS test
    ks_statistic, ks_p_value = ks_2samp(reference_class_probs, new_class_probs)

    # Print results
    print(f"KS Test for Class {class_name}:")
    print(f"KS Statistic: {ks_statistic}")
    print(f"P-Value: {ks_p_value}")

    # You can set a significance level and check for drift based on the p-value
    alpha = 0.05
    if ks_p_value < alpha:
        print(f"Drift detected for Class {class_name}")
    else:
        print(f"No drift detected for Class {class_name}")



#############################################################################################################################################################
#############################################################################################################################################################

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Load a pre-trained model
model = tf.keras.applications.ResNet50(weights='imagenet')

# Load your test dataset into a TensorFlow Dataset or generator
test_data_dir = "path/to/your/test/dataset"
batch_size = 32

# Create a TensorFlow Dataset for the test data
test_dataset = tf.keras.utils.image_dataset_from_directory(
    test_data_dir,
    image_size=(224, 224),
    batch_size=batch_size,
    label_mode=None,  # We want to predict, so no labels
    shuffle=False  # Don't shuffle the data to match predictions with filenames
)

# Create an empty list to store predicted probabilities
all_predictions = []

# Iterate over batches in the test dataset
for step, images in enumerate(test_dataset):
    # Predict using the model
    predictions = model.predict(images)
    all_predictions.extend(predictions)

# Convert predictions to a NumPy array
all_predictions = np.array(all_predictions)

# Plot the distribution of predicted class probabilities
plt.figure(figsize=(10, 6))
for class_idx, class_name in enumerate(model.predict(images).shape[1]):
    class_probs = all_predictions[:, class_idx]
    plt.hist(class_probs, bins=20, alpha=0.5, label=class_name)

plt.xlabel("Probability")
plt.ylabel("Frequency")
plt.title("Distribution of Predicted Class Probabilities")
plt.legend()
plt.tight_layout()
plt.show()

#############################################################################################################################################################
#############################################################################################################################################################

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt

# Load a pre-trained model
model = tf.keras.applications.ResNet50(weights='imagenet')

# Path to your test dataset
test_data_dir = "path/to/your/test/dataset"
batch_size = 32

# Create an ImageDataGenerator for the test data
test_datagen = ImageDataGenerator(rescale=1.0/255)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

# Get the predicted class probabilities for the test data
predictions = model.predict(test_generator, steps=len(test_generator), verbose=1)

# Plot the distribution of predicted class probabilities
plt.figure(figsize=(10, 6))
for class_idx, class_name in enumerate(test_generator.class_indices.keys()):
    class_probs = predictions[:, class_idx]
    plt.hist(class_probs, bins=20, alpha=0.5, label=class_name)

plt.xlabel("Probability")
plt.ylabel("Frequency")
plt.title("Distribution of Predicted Class Probabilities")
plt.legend()
plt.tight_layout()
plt.show()
